# PHP
# Test and package your PHP project.
# Add steps that run tests, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - '*'  # Ensures all paths trigger the pipeline

pool:
  vmImage: ubuntu-latest

variables:
  phpVersion: 7.4

steps:
- script: |
    PHP_VERSION=$(phpVersion)

    sudo apt-get update
    sudo apt-get install -y software-properties-common
    sudo add-apt-repository ppa:ondrej/php -y
    sudo apt-get update

    sudo apt-get install -y php7.4 php7.4-common php7.4-cli php7.4-mbstring php7.4-xml php7.4-zip php7.4-curl php7.4-bcmath

    sudo update-alternatives --set php /usr/bin/php$PHP_VERSION
    sudo update-alternatives --set phar /usr/bin/phar$PHP_VERSION
    sudo update-alternatives --set phpdbg /usr/bin/phpdbg$PHP_VERSION
    sudo update-alternatives --set php-cgi /usr/bin/php-cgi$PHP_VERSION
    sudo update-alternatives --set phar.phar /usr/bin/phar.phar$PHP_VERSION
    php -version
  displayName: 'Install and use PHP $(phpVersion)'

- script: |
    ls -la composer.phar  # Optional: just to confirm file presence
    php composer.phar install --no-interaction --prefer-dist --optimize-autoloader
  displayName: 'Install dependencies using local composer.phar'

- script: |
    php --version
    composer --version
  displayName: 'Check PHP/Composer versions'

- script: |
    if [ ! -f .env.example ]; then echo ".env.example not found!"; exit 1; fi
    cp .env.example .env
    sed -i "s/^DB_CONNECTION=.*/DB_CONNECTION=$(DB_CONNECTION)/" .env
    sed -i "s/^DB_HOST=.*/DB_HOST=$(DB_HOST)/" .env
    sed -i "s/^DB_PORT=.*/DB_PORT=$(DB_PORT)/" .env
    sed -i "s/^DB_DATABASE=.*/DB_DATABASE=$(DB_DATABASE)/" .env
    sed -i "s/^DB_USERNAME=.*/DB_USERNAME=$(DB_USERNAME)/" .env
    sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=$(DB_PASSWORD)/" .env
    php artisan key:generate --ansi
  displayName: 'Configure .env & generate key'

# If you want to run migrations & seeds as part of build:
- script: |
    php artisan migrate --force
    php artisan db:seed --force
  displayName: 'Run migrations & seed database'

# If you want to run tests:
- script: |
    vendor/bin/phpunit --no-coverage
  displayName: 'Run tests'

# Package the application for deployment
- task: ArchiveFiles@2
  displayName: 'Archive files into zip'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)'  # The full source tree
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '$(Build.BuildId).zip'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/ArtifactsToBePublished' 
  displayName: 'Copy Build Artifacts'

# Publish as a pipeline artifact
- task: PublishBuildArtifacts@1
  displayName: 'Publish artifact for deployment'
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    artifactName: 'drop'
    publishLocation: 'Container'
